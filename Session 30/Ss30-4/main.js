const prompt = require('prompt-sync')();
class Course {
    constructor(id, name, instructor) {
        this.id = id;
        this.name = name;
        this.instructor = instructor;
        this.students = [];
    }
}

class User {
    constructor(id, name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = [];
    }
}

class CourseManager {
    constructor() {
        this.courses = [];
        this.users = [];
    }

    // ----------------- KH√ìA H·ªåC -----------------
    addCourse(id, name, instructor) {
        const existing = this.courses.find((c) => c.id === id);
        if (existing) {
            console.log(' Kh√≥a h·ªçc ƒë√£ t·ªìn t·∫°i.');
            return;
        }
        this.courses.push(new Course(id, name, instructor));
        console.log(' ƒê√£ th√™m kh√≥a h·ªçc.');
    }

    searchCourse(name) {
        const results = this.courses.filter((c) =>
            c.name.toLowerCase().includes(name.toLowerCase())
        );
        console.log(' K·∫øt qu·∫£ t√¨m ki·∫øm:');
        results.forEach((c) => {
            console.log(
                `ID: ${c.id}, T√™n: ${c.name}, Gi√°o vi√™n: ${c.instructor}`
            );
        });
    }

    deleteCourse(courseId) {
        const index = this.courses.findIndex((c) => c.id === courseId);
        if (index === -1) {
            console.log(' Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.');
            return;
        }
        this.courses.splice(index, 1);
        this.users.forEach((user) => {
            user.registeredCourses = user.registeredCourses.filter(
                (id) => id !== courseId
            );
        });

        console.log(` ƒê√£ x√≥a kh√≥a h·ªçc ${courseId} v√† c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng.`);
    }
    addUser(id, name) {
        const existing = this.users.find((u) => u.id === id);
        if (existing) {
            console.log('Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i.');
            return;
        }
        this.users.push(new User(id, name));
        console.log(' ƒê√£ th√™m ng∆∞·ªùi d√πng.');
    }
    registerCourse(userId, courseId) {
        const user = this.users.find((u) => u.id === userId);
        const course = this.courses.find((c) => c.id === courseId);
        if (!user || !course) {
            console.log(' Ng∆∞·ªùi d√πng ho·∫∑c kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i.');
            return;
        }
        if (user.registeredCourses.includes(courseId)) {
            console.log('Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y.');
            return;
        }

        user.registeredCourses.push(courseId);
        course.students.push(userId);
        console.log(' ƒêƒÉng k√Ω th√†nh c√¥ng.');
    }

    unregisterCourse(userId, courseId) {
        const user = this.users.find((u) => u.id === userId);
        const course = this.courses.find((c) => c.id === courseId);
        if (!user || !course) {
            console.log(' Ng∆∞·ªùi d√πng ho·∫∑c kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i.');
            return;
        }

        user.registeredCourses = user.registeredCourses.filter(
            (id) => id !== courseId
        );
        course.students = course.students.filter((id) => id !== userId);
        console.log(' ƒê√£ h·ªßy ƒëƒÉng k√Ω.');
    }

    showUserCourses(userId) {
        const user = this.users.find((u) => u.id === userId);
        if (!user) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.');
            return;
        }

        console.log(`üìö Kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng ${user.name}:`);
        user.registeredCourses.forEach((courseId) => {
            const course = this.courses.find((c) => c.id === courseId);
            if (course) {
                console.log(`- ${course.name} (${course.instructor})`);
            }
        });
    }
}

const app = new CourseManager();

while (true) {
    console.log('\n===== MENU CH√çNH =====');
    console.log('1. Qu·∫£n l√Ω kh√≥a h·ªçc');
    console.log('2. Qu·∫£n l√Ω ng∆∞·ªùi d√πng');
    console.log('3. Tho√°t');
    const choice = prompt('Ch·ªçn ch·ª©c nƒÉng: ');

    if (choice === '1') {
        while (true) {
            console.log('\n--- Qu·∫£n l√Ω kh√≥a h·ªçc ---');
            console.log('1. Th√™m kh√≥a h·ªçc');
            console.log('2. T√¨m ki·∫øm kh√≥a h·ªçc');
            console.log('3. X√≥a kh√≥a h·ªçc');
            console.log('4. Quay l·∫°i menu ch√≠nh');
            const subChoice = prompt('Ch·ªçn ch·ª©c nƒÉng: ');

            if (subChoice === '1') {
                const id = prompt('Nh·∫≠p ID kh√≥a h·ªçc: ');
                const name = prompt('Nh·∫≠p t√™n kh√≥a h·ªçc: ');
                const instructor = prompt('Nh·∫≠p t√™n gi√°o vi√™n: ');
                app.addCourse(id, name, instructor);
            } else if (subChoice === '2') {
                const name = prompt('Nh·∫≠p t√™n kh√≥a h·ªçc c·∫ßn t√¨m: ');
                app.searchCourse(name);
            } else if (subChoice === '3') {
                const id = prompt('Nh·∫≠p ID kh√≥a h·ªçc c·∫ßn x√≥a: ');
                app.deleteCourse(id);
            } else if (subChoice === '4') {
                break;
            } else {
                console.log('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
            }
        }
    } else if (choice === '2') {
        while (true) {
            console.log('\n--- Qu·∫£n l√Ω ng∆∞·ªùi d√πng ---');
            console.log('1. Th√™m ng∆∞·ªùi d√πng');
            console.log('2. ƒêƒÉng k√Ω kh√≥a h·ªçc');
            console.log('3. H·ªßy ƒëƒÉng k√Ω kh√≥a h·ªçc');
            console.log('4. Hi·ªÉn th·ªã danh s√°ch kh√≥a h·ªçc c·ªßa ng∆∞·ªùi d√πng');
            console.log('5. Quay l·∫°i menu ch√≠nh');
            const subChoice = prompt('Ch·ªçn ch·ª©c nƒÉng: ');

            if (subChoice === '1') {
                const id = prompt('Nh·∫≠p ID ng∆∞·ªùi d√πng: ');
                const name = prompt('Nh·∫≠p t√™n ng∆∞·ªùi d√πng: ');
                app.addUser(id, name);
            } else if (subChoice === '2') {
                const userId = prompt('Nh·∫≠p ID ng∆∞·ªùi d√πng: ');
                const courseId = prompt('Nh·∫≠p ID kh√≥a h·ªçc mu·ªën ƒëƒÉng k√Ω: ');
                app.registerCourse(userId, courseId);
            } else if (subChoice === '3') {
                const userId = prompt('Nh·∫≠p ID ng∆∞·ªùi d√πng: ');
                const courseId = prompt('Nh·∫≠p ID kh√≥a h·ªçc mu·ªën h·ªßy ƒëƒÉng k√Ω: ');
                app.unregisterCourse(userId, courseId);
            } else if (subChoice === '4') {
                const userId = prompt('Nh·∫≠p ID ng∆∞·ªùi d√πng: ');
                app.showUserCourses(userId);
            } else if (subChoice === '5') {
                break;
            } else {
                console.log('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
            }
        }
    } else if (choice === '3') {
        console.log('üëã T·∫°m bi·ªát!');
        break;
    } else {
        console.log('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
    }
}
